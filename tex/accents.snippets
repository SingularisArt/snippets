global !p

from builtin import chooseNext
from latex_.scopes import math
from latex_.cmdsub import barHatVec, longBarHatVec
from latex_.variables import bars, hats, vecs

endglobal


################################################################################
#                                                                              #
#                                   Accents                                    #
#                                                                              #
################################################################################

# xbar -> \bar{x}
# xhat -> \hat{x}
# xvec -> \vec{x}
context "math()"
snippet "(\b[\da-zA-Z0-9]|\\[\da-zA-Z]+)((?:\{\S+\s?\}|[\da-zA-Z]))?(bar|hat|vec)" "Bar/Hat/Vector" Ar
`!p snip.rv = barHatVec(match.group(3) or match.group(2), match.group(1), match.group(2) if match.group(3) else "")`
endsnippet

# xxbar -> \overline{xx}
# xxhat -> \widehat{xx}
# xxvec -> \overrightarrow{xx}
context "math()"
snippet "(?<!\\)\b([\\0-9a-zA-Z_\{\}]{2,})([_^](?:\{\S+\s?\}|[\\0-9a-zA-Z_\{\}]))?(bar|hat|vec)" "Long Bar/Hat/Vector" Ar
`!p snip.rv = longBarHatVec(match.group(3) or match.group(2), match.group(1), match.group(2) if match.group(3) else "")`
endsnippet

# \bar{xx}      -> \overline{xx}
# \overline{xx} -> \bar{xx}
context "math()"
snippet "(\\bar|\\overline)(\{[\\0-9a-zA-Z_\{\}]+\s?\})((?:[_^](?:[\\0-9a-zA-Z_\{\}]|\{[\\\w\d\s]+\}))?)" "Bar" r
`!p
snip.rv = chooseNext(match.group(1), bars, 2) + match.group(2) + match.group(3)
`
endsnippet

# \hat{xx}      -> \widehat{xx}
# \widehat{xx}  -> \hat{xx}
context "math()"
snippet "(\\hat|\\widehat)(\{[\\0-9a-zA-Z_\{\}]+\s?\})((?:[_^](?:[\\0-9a-zA-Z_\{\}]|\{[\\\w\d\s]+\}))?)" "Hat" r
`!p
snip.rv = chooseNext(match.group(1), hats, 2) + match.group(2) + match.group(3)
`
endsnippet

# \vec{xx}            -> \overrightarrow{xx}
# \overrightarrow{xx} -> \vec{xx}
context "math()"
snippet "(\\vec|\\overrightarrow)(\{[\\0-9a-zA-Z_\{\}]+\s?\})((?:[_^](?:[\\0-9a-zA-Z_\{\}]|\{[\\\w\d\s]+\}))?)" "Vector" r
`!p
snip.rv = chooseNext(match.group(1), vecs, 2) + match.group(2) + match.group(3)
`
endsnippet

# <a,a> -> \braket{a,a}
# <a|a> -> \braket{a|a}
context "math()"
snippet "\<(.*?)(,|\|)(.*?)\>" "Bra" riA
\braket{`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)``!p snip.rv = match.group(3)`}
endsnippet

# <a| -> \bra{a}
# <|  -> \bra{}
context "math()"
snippet "\<(.*?)\|" "Bra" riA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

# |a> -> \ket{a}
# |>  -> \ket{}
context "math()"
snippet "\|(.*?)\>" "Ket" riA
\ket{`!p snip.rv = match.group(1)`}
endsnippet

# \bra{a}|a> -> \braket{a|a}
# \ket{a}|a> -> \braket{a|a}
# \bra{a},a> -> \braket{a,a}
# \ket{a},a> -> \braket{a,a}
context "math()"
snippet "\\(bra|ket){(.*?)}(,)?([^\|]*?)\>" "Braket" riA
\braket{`!p
brake = "|" if match.group(3) is None else match.group(3)
snip.rv = match.group(2) + brake + match.group(4)`}
endsnippet

# vim:ft=snippets:
