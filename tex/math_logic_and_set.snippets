global !p

from builtin import choose_next
from latex_.scopes import math

logical_terms = {'yw': 'because', 'sy': 'therefore', 'and': 'land', 'or': 'lor', 'neg': 'neg'}
logical_terms_cycle = ['because', 'therefore', 'land', 'lor', 'neg']

exists = ['exist', 'nexists']
exist_forall = ['exist', 'forall']

set_relations_reverse = ['b', 'p']
set_relations_sub = ['', 'eq', 'neqq']
set_relations_sup = ['', 'eq', 'neqq']

not_reverse = ['', 'not']
big_reverse = ['', 'big']

a_u = ['a', 'u']
ands = ['land', 'bigwedge']
ors = ['lor', 'bigvee']

endglobal

#######################################################################
#																																			#
#                            Logic and Set                            #
#																																			#
#######################################################################


# yw 	-> \because
# sy 	-> \therefore
# and -> \land
# or 	-> \lor
# neg -> \neg
context "math()"
snippet "(?<!\\)\b(yw|sy|and|or|neg)" "Logical Terms" Ar
\\`!p
snip.rv = logical_terms[match.group(1)]
` 
endsnippet

# \because 		-> \therefore
# \therefore 	-> \land
# \land				-> \lor
# \lor				-> \neg
# \neg				-> \because
context "math()"
snippet "\\(because|therefore|land|lor|neg)(\s?)" "Logical Terms Transformation" r
\\`!p
snip.rv = choose_next(match.group(1), logical_terms_cycle, 5) + match.group(2)
`
endsnippet

# \land / 		-> \bigwedge
# \bigwedge / -> \land
context "math()"
snippet "\\(land|bigwedge)(\s?)/" "And" r
\\`!p
snip.rv = choose_next(match.group(1), ands, 2) + match.group(2)
`
endsnippet

# \lor / 		-> \bigvee
# \bigvee / -> \lor
context "math()"
snippet "\\(lor|bigvee)(\s?)/" "Or" r
\\`!p
snip.rv = choose_next(match.group(1), ors, 2) + match.group(2)
`
endsnippet

# |-> -> \mapsto
context "math()"
snippet |-> "Map" Ai
\mapsto 
endsnippet

# exist -> \exist_{},
# EE 		-> \exist_{},
context "math()"
snippet "(?<!\\)\b(exist|EE)" "Exist" Ar
\exist_{${1:${VISUAL}}},$0
endsnippet

# forall 	-> \forall_{},
# AA 			-> \forall_{},
context "math()"
snippet "(?<!\\)\b(forall|AA)" "Forall" Ar
\forall_{${1:${VISUAL}}},$0
endsnippet

# \exist_{x} 	-> \forall_{x}
# \forall_{x} -> \exist_{x}
context "math()"
snippet "\\(exist|forall)(_(?:[a-zA-Z]|\{[^}]+\}),?)(\s?)" "Exist and Forall" r
\\`!p
snip.rv = choose_next(match.group(1), exist_forall, 2) + match.group(2) + match.group(3)
`
endsnippet

# in 	-> \in
# not -> \not
context "math()"
snippet "(in|not)" "In and Not" rA
\\`!p
snip.rv = match.group(1)
`
endsnippet

# OO -> \emptyset
context "math()"
snippet OO "Empty" A
\emptyset
endsnippet

# cc -> \subset
context "math()"
snippet cc "subset" Ai
\subset
endsnippet

# Cc -> \subseteq
context "math()"
snippet Cc "Sub Set Equal" wA
\\subseteq
endsnippet

# set -> \{  \}
context "math()"
snippet set "set" wA
\\{ $1 \\}$0
endsnippet

# ap -> \cap
context "math()"
snippet	Nn "cap" iA
\cap
endsnippet

# up -> \cup
context "math()"
snippet UU "cup" iA
\cup
endsnippet

# uuu -> \bigcup_{i \in I}
context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

# nnn -> \bigcap_{i \in I}
context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet
