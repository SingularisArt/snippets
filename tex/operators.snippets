global !p

from builtin import choose_next
from latex_.scopes import math, not_unit

plus_minus = ['\\pm', '\\mp']

endglobal


################################################################################
#                                                                              #
#                                Big Operators                                 #
#                                                                              #
################################################################################

# sum -> \sum_{i=1}^{\infty} f(x)
# prod -> \prod_{i=1}^{\infty} f(x)
context "math()"
snippet "(prod|sum)" "Product or Summation" Ari
\\`!p snip.rv = match.group(1)`_{${1:i=1}}^{${2:\infty}} ${3:f(x)}
endsnippet

# lim -> \lim_{x \to \infty} f(x)
context "math()"
snippet lim "Limit" Ai
\lim_{${1:x} \to ${2:\infty}} ${3:f(x)}
endsnippet

# int -> \int_{0}^{\infty}\d x
# iint -> \iint_{0}^{\infty}\d x
# iiint -> \iiint_{0}^{\infty}\d x
# oint -> \oint_{0}^{\infty}\d x
# oiint -> \oiint_{0}^{\infty}\d x
# oiiint -> \oiiint_{0}^{\infty}\d x
# inty -> \int_{0}^{\infty}\d y
# iinty -> \iint_{0}^{\infty}\d y
# iiinty -> \iiint_{0}^{\infty}\d y
# ointy -> \oint_{0}^{\infty}\d y
# oiinty -> \oiint_{0}^{\infty}\d y
# oiiinty -> \oiiint_{0}^{\infty}\d y
context "math()"
snippet "(o?i{1,3})nt([a-zA-Z]?)" "Definite Integral" r
\\`!p snip.rv = match.group(1)`nt_{${1:0}}^{${2:\infty}}${3:${VISUAL}}\d `!p snip.rv = match.group(2) or 'x'`
endsnippet

# nint -> \int \d x
# niint -> \iint \d x
# niiint -> \iiint \d x
# noint -> \oint \d x
# noiint -> \oiint \d x
# noiiint -> \oiiint \d x
# ninty -> \int \d y
# niinty -> \iint \d y
# niiinty -> \iiint \d y
# nointy -> \oint \d y
# noiinty -> \oiint \d y
# noiiinty -> \oiiint \d y
context "math()"
snippet "n(o?i{1,3})nt([a-zA-Z]?)" "Indefinite Integral" r
\\`!p snip.rv = match.group(1)`nt ${1:${VISUAL}}\d `!p snip.rv = match.group(2) or 'x'`
endsnippet


#######################################################################
#                                                                     #
#                           Binary Operator                           #
#                                                                     #
#######################################################################

# xx -> \times
context "math()"
snippet xx "Multiply" Awi
\times
endsnippet

# cxx -> \cdot
context "math()"
snippet cxx "Dot Product" Aw
\cdot
endsnippet

# div -> \div
context "math()"
snippet div "Divide" Aw
\div
endsnippet

# +- -> \pm
context "math()"
snippet +- "Plus Minus" Ai
\pm
endsnippet

# -+ -> \mp
context "math()"
snippet -+ "Minus Plus" Ai
\mp
endsnippet

# \pm -> \mp
# \mp -> \pm
context "math()"
snippet "(\\(pm|mp))" "Plus Minus Transformation" ir
`!p
snip.rv = choose_next(match.group(1), plus_minus, 2)
`
endsnippet


#######################################################################
#                                                                     #
#                              Fractions                              #
#                                                                     #
#######################################################################

# // -> \frac{}{}
context "math()"
snippet // "Fraction" iA
\\frac{${VISUAL}$1}{$2}
endsnippet

# 4\pi/ -> \frac{4\pi}{}
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wAr
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

# (4\pi \times 1)/ -> \frac{4\pi \times 1}{}
context "math()"
snippet '^.*\)/' "() Fraction" wAr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}
endsnippet


#######################################################################
#                                                                     #
#                              Functions                              #
#                                                                     #
#######################################################################

# sin    -> \sin
# cos    -> \cos
# tan    -> \tan
# ln     -> \ln
# lg     -> \lg
# log    -> \log
# max    -> \max
# min    -> \min
# arg    -> \arg
# det    -> \det
# exp    -> \exp
# csc    -> \csc
# sec    -> \sec
# arcsin -> \arcsin
# arccos -> \arccos
# arctan -> \arctan
# sinh   -> \sinh
# cosh   -> \cosh
# tanh   -> \tanh
# cot    -> \cot
# coth   -> \coth
# gcd    -> \gcd
context "math()"
snippet "\\?\b(sin|cos|tan|ln|lg|log|max|min|arg|det|exp|csc|sec|arcsin|arccos|arctan|sinh|cosh|tanh|cot|coth|gcd)" "Common Function" Ar
`!p
snip.rv = '\\' + match.group(1)
`
endsnippet

# fofx -> f(x) = x
context "math()"
snippet '([a-zA-Z])of([a-zA-Z])' "Create Function" rwA
`!p snip.rv = match.group(1)`(`!p snip.rv = match.group(2)`) = ${1:`!p snip.rv = match.group(2)`}
endsnippet

# fof<x,y,z> -> f(x,y,z) = x,y,z
context "math()"
snippet '(.)of\<(.*?)\>' "Create Function" rwA
`!p snip.rv = match.group(1)`(`!p snip.rv = match.group(2)`) = ${1:`!p snip.rv = match.group(2)`}
endsnippet

# map -> f : A \to B
context "math()"
snippet map "Mapping from set A to set B" i
f : ${1:A} \to ${2:B}
endsnippet

# mapv -> f : B \to A
context "math()"
snippet mapv "Inverse mapping from set B to set A" i
f^{-1} : ${1:B} \to ${2:A}
endsnippet

# vim:ft=snippets:
