global !p

from builtin import chooseNext
from latex_.scopes import math
from latex_.variables import plusMinus, times

endglobal


################################################################################
#                                                                              #
#                                Big Operators                                 #
#                                                                              #
################################################################################

# sum  -> \sum_{i=1}^{\infty} f(x)
# prod -> \prod_{i=1}^{\infty} f(x)
context "math()"
snippet "(prod|sum)" "Product or Summation" Ari
\\`!p snip.rv = match.group(1)`_{${1:i=1}}^{${2:\infty}} ${3:f(x)}
endsnippet

# x*k -> x^{\ast}_{k}
# y*k -> y^{\ast}_{k}
# z*k -> z^{\ast}_{k}
context "math()"
snippet "([a-zA-Z])\*k" "kth item in sum" Ari
`!p snip.rv = match.group(1)`^{\ast}_{k}
endsnippet

# lim -> \lim_{x \to \infty} f(x)
context "math()"
snippet lim "Limit" Ai
\lim_{${1:x} \to ${2:\infty}} ${3:f(x)}
endsnippet

# int     -> \int_{0}^{\infty} \,\dx
# iint    -> \iint_{0}^{\infty} \,\dx
# iiint   -> \iiint_{0}^{\infty} \,\dx
# oint    -> \oint_{0}^{\infty} \,\dx
# inty    -> \int_{0}^{\infty} \,\dy
# iinty   -> \iint_{0}^{\infty} \,\dy
# iiinty  -> \iiint_{0}^{\infty} \,\dy
# ointy   -> \oint_{0}^{\infty} \,\dy
# lint     -> \int\limits_{0}^{\infty} \,\dx
# liint    -> \iint\limits_{0}^{\infty} \,\dx
# liiint   -> \iiint\limits_{0}^{\infty} \,\dx
# loint    -> \oint\limits_{0}^{\infty} \,\dx
# linty    -> \int\limits_{0}^{\infty} \,\dy
# liinty   -> \iint\limits_{0}^{\infty} \,\dy
# liiinty  -> \iiint\limits_{0}^{\infty} \,\dy
# lointy   -> \oint\limits_{0}^{\infty} \,\dy
context "math()"
snippet "(l)?(o?i{1,3})nt([a-zA-Z]?)" "Definite Integral" r
\\`!p snip.rv = match.group(2)`nt`!p snip.rv = "\\limits" if match.group(1) else ""`_{${1:0}}^{${2:\infty}} ${3:${VISUAL}} \\${4:,}\d`!p snip.rv = match.group(3) or "x"`
endsnippet

# nint     -> \int \,\dx
# niint    -> \iint \,\dx
# niiint   -> \iiint \,\dx
# noint    -> \oint \,\dx
# ninty    -> \int \,\dy
# niinty   -> \iint \,\dy
# niiinty  -> \iiint \,\dy
# nointy   -> \oint \,\dy
context "math()"
snippet "(o?I{1,3})nt([a-zA-Z]?)" "Indefinite Integral" r
\\`!p snip.rv = match.group(1).lower()`nt ${1:${VISUAL}} \\${4:,}\d`!p snip.rv = match.group(2) or "x"`
endsnippet

# ddx    -> \frac{\mathrm{d}}{\mathrm{d} x}
# dydx   -> \frac{\mathrm{d} y}{\mathrm{d} x}
# 2ddx   -> \frac{\mathrm{d}^{2}}{\mathrm{d}^{2} x}
# 2dydx  -> \frac{\mathrm{d}^{2} y}{\mathrm{d}^{2} x}
# pddx   -> \frac{\partial}{\partial x}
# pdydx  -> \frac{\partial y}{\partial x}
# 2pddx  -> \frac{\partial^{2}}{\partial^{2} x}
# 2pdydx -> \frac{\partial^{2} y}{\partial^{2} x}
context "math()"
snippet "([0-9]+)?(p)?d([a-zA-Z])?([0-9]+)?d([a-zA-Z])" "Hi" r
`!p
derivative_type = "\\mathrm{d}" if not match.group(2) else "\\partial"
derivative_number = "" if not match.group(1) else "^{" + match.group(1) + "}"
derivative_function = "" if not match.group(3) else " " + match.group(3)

frac_1 = "{" + derivative_type + derivative_number + derivative_function + "}"
frac_2 = "{" + derivative_type + derivative_number + " " + match.group(5) + "}"
snip.rv = "\\frac" + frac_1 + frac_2
`
endsnippet


#######################################################################
#                                                                     #
#                           Binary Operator                           #
#                                                                     #
#######################################################################

# xx -> \times
context "math()"
snippet xx "Multiply" Awi
\times
endsnippet

# cxx -> \cdot
context "math()"
snippet cxx "Dot Product" Aw
\cdot
endsnippet

# \cdot -> \times
# \times -> \cdot
context "math()"
snippet "(\\(times|cdot))" "Dot Product Transformation" ir
`!p
snip.rv = chooseNext(match.group(1), times, 2)
`
endsnippet

# -- -> \div
context "math()"
snippet -- "Divide" Aw
\div
endsnippet

# +- -> \pm
context "math()"
snippet +- "Plus Minus" Ai
\pm
endsnippet

# -+ -> \mp
context "math()"
snippet -+ "Minus Plus" Ai
\mp
endsnippet

# \pm -> \mp
# \mp -> \pm
context "math()"
snippet "(\\(pm|mp))" "Plus Minus Transformation" ir
`!p
snip.rv = chooseNext(match.group(1), plusMinus, 2)
`
endsnippet


#######################################################################
#                                                                     #
#                              Fractions                              #
#                                                                     #
#######################################################################

# // -> \frac{}{}
context "math()"
snippet // "Fraction" iA
\\frac{${VISUAL}$1}{$2}
endsnippet

# 4\pi^2/ -> \frac{4\pi^2}{}
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/" "Fraction" wAr
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

# (4\pi \times 2)/ -> \frac{4\pi \times 2}{}
context "math()"
snippet "^.*\)/" "() Fraction" wAr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ")": depth += 1
	if stripped[i] == "(": depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}
endsnippet


#######################################################################
#                                                                     #
#                              Functions                              #
#                                                                     #
#######################################################################

# sin    -> \sin
# cos    -> \cos
# tan    -> \tan
# ln     -> \ln
# lg     -> \lg
# log    -> \log
# max    -> \max
# min    -> \min
# arg    -> \arg
# exp    -> \exp
# csc    -> \csc
# sec    -> \sec
# arcsin -> \arcsin
# arccos -> \arccos
# arctan -> \arctan
# sinh   -> \sinh
# cosh   -> \cosh
# tanh   -> \tanh
# cot    -> \cot
# coth   -> \coth
# gcd    -> \gcd
context "math()"
snippet "\\?\b(sin|cos|tan|ln|lg|log|max|min|arg|exp|csc|sec|arcsin|arccos|arctan|sinh|cosh|tanh|cot|coth|gcd)" "Common Function" Ar
\\`!p
snip.rv = match.group(1)
`(${1:${VISUAL}})$0
endsnippet

# map -> f : A \to B
context "math()"
snippet map "Mapping from set A to set B" i
${1:f} : ${2:A} \to ${3:B}
endsnippet

# mapv -> f : B \to A
context "math()"
snippet mapv "Inverse mapping from set B to set A" i
${1:f}^{-1} : ${2:B} \to ${3:A}
endsnippet

context "math()"
snippet chse "n choose p" i
{${1:n} \choose ${2:p}}
endsnippet

# vim:ft=snippets:
