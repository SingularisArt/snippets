global !p

from latex_.scopes import math
from latex_.extcal import *

endglobal


################################################################################
#                                                                              #
#                            Mathematica and Sympy                             #
#                                                                              #
################################################################################

context "math()"
snippet sym "SymPy Block" w
sympy ${1:${VISUAL}} sympy$0
endsnippet

context "math()"
snippet SYM "SymPy Block" w
SYMPY ${1:${VISUAL}} SYMPY$0
endsnippet

context "math()"
snippet wlf "WolframScript Block" w
wolfram ${1:${VISUAL}} wolfram$0
endsnippet

context "math()"
snippet WLF "WolframScript Block" w
WOLFRAM ${1:${VISUAL}} WOLFRAM$0
endsnippet

priority 1
context "math()"
snippet \sym "SymPy Block" w
\\sympy ${1:${VISUAL}} \\sympy$0
endsnippet

priority 1
context "math()"
snippet \SYM "SymPy Block" w
\\SYMPY ${1:${VISUAL}} \\SYMPY$0
endsnippet

priority 1
context "math()"
snippet \wlf "WolframScript Block" w
\\wolfram ${1:${VISUAL}} \\wolfram$0
endsnippet

priority 1
context "math()"
snippet \WLF "WolframScript Block" w
\\WOLFRAM ${1:${VISUAL}} \\WOLFRAM$0
endsnippet

snippet 'sympy (.*?) sympy' "Evaluate SymPy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
i, j, k = symbols('i j k', integer=True)
f, g, h = symbols('f g h', cls=Function)
result = latex(eval(pre_process_text(match.group(1))))
snip.rv = process_latex(result)
`
endsnippet

snippet 'SYMPY (.*?) SYMPY' "Evaluate SymPy" wr
`!p
from sympy import *

x, y, z, t = symbols('x y z t')
i, j, k = symbols('i j k', integer=True)
f, g, h = symbols('f g h', cls=Function)

result = latex(eval(pre_process_text(match.group(1))))
snip.rv = f"{match.group(1)} = {process_latex(result)}"
`
endsnippet

snippet '\\sympy (.*?) \\sympy' "Evaluate SymPy" wr
`!p
from sympy import *
from latex2sympy2 import *

x, y, z, t = symbols("x y z t")
i, j, k = symbols("i j k", integer=True)
f, g, h = symbols("f g h", cls=Function)

string = match.group(1)
sympyString = latex2sympy(pre_process_latex(string))
snip.rv = latex(sympyString.doit())
`
endsnippet

snippet '\\SYMPY (.*?) \\SYMPY' "Evaluate SymPy" wr
`!p
from sympy import *
from latex2sympy2 import *

x, y, z, t = symbols("x y z t")
i, j, k = symbols("i j k", integer=True)
f, g, h = symbols("f g h", cls=Function)

string = match.group(1)
sympyString = latex2sympy(pre_process_latex(string))
snip.rv = f"{match.group(1)} = {latex(sympyString.doit())}"
`
endsnippet

snippet 'wolfram (.*?) wolfram' "Evaluate WolframScript" wr
endsnippet

snippet 'WOLFRAM (.*?) WOLFRAM' "Evaluate WolframScript" wr
endsnippet

snippet '\\wolfram (.*?) \\wolfram' "Evaluate WolframScript" wr
endsnippet

snippet '\\WOLFRAM (.*?) \\WOLFRAM' "Evaluate WolframScript" wr
endsnippet

# vim:ft=snippets:
