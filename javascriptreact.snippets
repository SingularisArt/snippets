extends "javascript"


#######################################################################
#                                                                     #
#                               Imports                               #
#                                                                     #
#######################################################################

snippet impt "import PropTypes" b
import PropTypes from 'prop-types'
endsnippet

snippet imr "import React" b
import React from 'react'
endsnippet

snippet imrd "import ReactDOM" b
import ReactDOM from 'react-dom'
endsnippet

snippet imrc "import React, { Component } from 'react'" b
import React, { Component } from 'react'
endsnippet

snippet imbr "import { BrowserRouter as Router } from 'react-router-dom'" b
import { BrowserRouter as Router } from 'react-router-dom'
endsnippet

snippet imrr "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'" b
import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'
endsnippet

snippet imrcp "import React, { Component } from 'react' + PropTypes" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
endsnippet

snippet imrm "import React, { memo } from 'react'" b
import React, { memo } from 'react'
endsnippet

snippet imrmp "import React, { memo } from 'react' + PropTypes" b
import React, { memo } from 'react'
import PropTypes from 'prop-types'
endsnippet

snippet imrpc "import React, { PureComponent } from 'react'" b
import React, { PureComponent } from 'react'
endsnippet

snippet imrpcp "import React, { PureComponent } from 'react' + PropTypes" b
import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
endsnippet

snippet imbrl "import { Link } from 'react-router-dom'" b
import { Link } from 'react-router-dom'
endsnippet

snippet imbrnl "import { NavLink } from 'react-router-dom'" b
import { NavLink } from 'react-router-dom'
endsnippet

snippet imbrc "import { Route, Switch, NavLink, Link } from 'react-router-dom'" b
import { Route, Switch, NavLink, Link } from 'react-router-dom'
endsnippet

snippet imbrs "import { Switch } from 'react-router-dom'" b
import { Switch } from 'react-router-dom'
endsnippet

snippet redux "Import Redux Connect" b
import { connect } from 'react-redux'
endsnippet

snippet reduxl "Import Redux Toolkit" b
import { $1 } from 'react-toolkit'
endsnippet

snippet imrn "React Native Import" b
import { $1 } from 'react-native'
endsnippet

snippet rnstyle "React Native Styles" b
const styles = StyleSheet.create({$1})
endsnippet


#######################################################################
#                                                                     #
#                             Components                              #
#                                                                     #
#######################################################################

snippet rcc "React Class Component"
import React, { Component } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <div>$2</div>
    )
  }
}
endsnippet

snippet rce "React Class Export Component"
import React, { Component } from 'react'

class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <div>$2</div>
    )
  }
}

export default $1
endsnippet

snippet rfcp "react Functional Component With PropTypes"
import React from 'react'
import PropTypes from 'prop-types'

function ${1:`!p snip.rv = snip.basename`}({ $2 }) {
  return (
    <div>$3</div>
  )
}

$1.propTypes = {}

export default $1
endsnippet

snippet rfcreduxp "react Functional Component Redux With PropTypes"
import PropTypes from 'prop-types'
import React from 'react'
import { connect } from 'react-redux'

export const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <div>$3</div>
  )
}

$1.propTypes = {
  $2: PropTypes.$3
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet rfcredux "react Functional Component Redux"
import React from 'react'
import { connect } from 'react-redux'

export const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <div>$3</div>
  )
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet rmcp "react Function Memo Component With PropTypes"
import PropTypes from 'prop-types'
import React, { memo } from 'react'

const ${1:`!p snip.rv = snip.basename`} = memo(({ $2 }) => {
  return (
    <div>$3</div>
  )
})

$1.propTypes = {}

export default $1
endsnippet

snippet rmc "react Function Memo Component"
import React, { memo } from 'react'

const ${1:`!p snip.rv = snip.basename`} = memo(() => {
  return (
    <div>$2</div>
  )
})

export default $1
endsnippet

snippet rpcp "react Class Pure Component With PropTypes"
import PropTypes from 'prop-types'
import React, { PureComponent } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends PureComponent {
  static propTypes = {}

  render() {
    return (
      <div>$2</div>
    )
  }
}
endsnippet

snippet rcep "react Class Export Component With PropTypes"
import PropTypes from 'prop-types'
import React, { Component } from 'react'

export class ${1:`!p snip.rv = snip.basename`} extends Component {
  static propTypes = {}

  render() {
    return (
      <div>$2</div>
    )
  }
}

export default $1
endsnippet

snippet rcreduxp "react Class Component Redux Prop Types"
import PropTypes from 'prop-types'
import React, { Component } from 'react'
import { connect } from 'react-redux'

export class ${1:`!p snip.rv = snip.basename`} extends Component {
  static propTypes = {
    $2: $3
  }

  render() {
    return (
      <div>$4</div>
    )
  }
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet rccp "react Class Component Prop Types"
import PropTypes from 'prop-types'
import React, { Component } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  static propTypes = {$2: $3}

  render() {
    return (
      <div>$4</div>
    )
  }
}
endsnippet

snippet rafcp "react Arrow Function Component With Prop Types"
import React from 'react'
import PropTypes from 'prop-types'

const ${1:`!p snip.rv = snip.basename`} = props => {
  return (
    <div>$2</div>
  )
}

$1.propTypes = {}

export default $1
endsnippet

snippet rfce "React Functional Export Component"
import React from 'react'

function ${1:`!p snip.rv = snip.basename`}({}) {
  return (
    <div>$2</div>
  )
}

export default $1
endsnippet

snippet rfc "React Functional Component"
import React from 'react'

export default function ${1:`!p snip.rv = snip.basename`}({}) {
  return (
    <div>$2</div>
  )
}
endsnippet

snippet rafce "React Arrow Function Export Component"
import React from 'react'

const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <div>$3</div>
  )
}

export default $1
endsnippet

snippet rafc "React Arrow Function Component"
import React from 'react'

const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <div>$3</div>
  )
}
endsnippet

snippet rpc "React Class Pure Component"
import React, { PureComponent } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends PureComponent {
  render() {
    return (
      <div>$2</div>
    )
  }
}
endsnippet

snippet rpce "React Class Export Pure Component"
import React, { PureComponent } from 'react'

class ${1:`!p snip.rv = snip.basename`} extends PureComponent {
  render() {
    return (
      <div>$2</div>
    )
  }
}

export default $1
endsnippet

snippet rcredux "React Class Component Redux"
import { connect } from 'react-redux'
import React, { Component } from 'react'

export class ${1:`!p snip.rv = snip.basename`} extends Component {
  state = {}

  render() {
    return (
      <div>$2</div>
    )
  }
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet hocredux "hocComponentWithRedux"
import React from 'react'
import { connect } from 'react-redux'
import PropTypes from 'prop-types'

export const mapStateToProps = state => ({})

export const mapDispatchToProps = {}

export const $1 = (WrappedComponent) => {
  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

  hocComponent.propTypes = {}

  return hocComponent
}

export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)($1(WrapperComponent))
endsnippet

snippet rnf "React Native Arrow Function Component"
import { View, Text } from 'react-native'
import React from 'react'

const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <View>
      <Text>$3</Text>
    </View>
  )
}

export default $1
endsnippet

snippet rnfs "React Native Arrow Function Component With Styles"
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

const ${1:`!p snip.rv = snip.basename`} = ({ $2 }) => {
  return (
    <View>
      <Text>$3</Text>
    </View>
  )
}

export default $1

const styles = StyleSheet.create({})
endsnippet

snippet hoc "hocComponent"
import React from 'react'
import PropTypes from 'prop-types'

export default (WrappedComponent) => {
  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

  hocComponent.propTypes = {}

  return hocComponent
}
endsnippet

snippet rnc "React Native Component" b
import { Text, View } from 'react-native'
import React, { Component } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <View>
        <Text>$2</Text>
      </View>
    )
  }
}
endsnippet

snippet rnce "React Native Component with Export" b
import { Text, View } from 'react-native'
import React, { Component } from 'react'

export class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <View>
        <Text>$2</Text>
      </View>
    )
  }
}

export default $1
endsnippet

snippet rncs "React Native Component with Styles" b
import { Text, StyleSheet, View } from 'react-native'
import React, { Component } from 'react'

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <View>
        <Text>$2</Text>
      </View>
    )
  }
}

const styles = StyleSheet.create({})
endsnippet

snippet rnf "React Native Functional Component" b
import { View, Text } from 'react-native'
import React from 'react'

export default function $1 () {
  return (
    <View>
      <Text>$2</Text>
    </View>
  )
}
endsnippet

snippet rnfs "React Native Functional Component with Styles" b
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

export default function $1 () {
  return (
    <View>
      <Text>$2</Text>
    </View>
  )
}

const styles = StyleSheet.create({})
endsnippet

snippet rnfe "React Native Functional Export Component" b
import { View, Text } from 'react-native'
import React from 'react'

const $1 = () => {
  return (
    <View>
      <Text>$2</Text>
    </View>
  )
}

export default $1}
endsnippet

snippet rnfes "React Native Functional Export Component with Styles" b
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

const $1 = () => {
  return (
    <View>
      <Text>$2</Text>
    </View>
  )
}

export default $1

const styles = StyleSheet.create({})
endsnippet

snippet rnpc "React Native Pure Component" b
import { Text, View } from 'react-native'
import React, { PureComponent } from 'react'

export default class $1 extends PureComponent {
  render() {
    return (
      <View>
        <Text>$2</Text>
      </View>
    )
  }
}
endsnippet

snippet rnpce "React Native Pure Component Export" b
import { Text, View } from 'react-native'
import React, { PureComponent } from 'react'

export class $1 extends PureComponent {
  render() {
    return (
      <View>
        <Text>$2</Text>
      </View>
    )
  }
}

export default $1
endsnippet

snippet cdm "componentDidMount"
componentDidMount() { $1 }
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) { $1 }
endsnippet

snippet cdup "componentDidUpdate"
componentDidUpdate(prevProps, prevState) { $1 }
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {$1 }
endsnippet

snippet sst "componentSetStateObject"
this.setState({$1})
endsnippet

snippet ssf "componentSetStateFunc"
this.setState((state, props) => { return { $1 }})
endsnippet

snippet props "componentProps"
this.props.$1
endsnippet

snippet state "componentState"
this.state.$1
endsnippet


#######################################################################
#                                                                     #
#                              PropTypes                              #
#                                                                     #
#######################################################################

snippet ptf "PropTypes.func" b
PropTypes.func${1:.isRequired}
endsnippet

snippet ptn "PropTypes.number" b
PropTypes.number${1:.isRequired}
endsnippet

snippet pto "PropTypes.object" b
PropTypes.object${1:.isRequired}
endsnippet

snippet pts "PropTypes.string" b
PropTypes.string${1:.isRequired}
endsnippet

snippet ptnd "PropTypes.node" b
PropTypes.node${1:.isRequired}
endsnippet

snippet ptel "PropTypes.element" b
PropTypes.element${1:.isRequired}
endsnippet

snippet pti "PropTypes.instanceOf" b
PropTypes.instanceOf(${1:class})${2:.isRequired}
endsnippet

snippet pte "PropTypes.oneOf" b
PropTypes.oneOf([${1:'value1', 'value2'}])${2:.isRequired}
endsnippet

snippet ptet "PropTypes.oneOfType" b
PropTypes.oneOfType([${1:PropTypes.string, PropTypes.number}])${2:.isRequired}
endsnippet

snippet ptao "PropTypes.arrayOf" b
PropTypes.arrayOf(${1:PropTypes.string})${2:.isRequired}
endsnippet

snippet ptoo "PropTypes.objectOf" b
PropTypes.objectOf(${1:PropTypes.number})${2:.isRequired}
endsnippet

snippet ptsh "PropTypes.shape" b
PropTypes.shape({${1:key: PropTypes.string, value: PropTypes.number}})${2:.isRequired}
endsnippet

snippet ptex "PropTypes.exact" b
PropTypes.exact({${1:key: PropTypes.string, value: PropTypes.number}})${2:.isRequired}
endsnippet

snippet ptany "PropTypes.any" b
PropTypes.any${1:.isRequired}
endsnippet

snippet ptf "Func prop type" b
PropTypes.func
endsnippet

snippet ptfr "Func prop type required" b
PropTypes.func.isRequired
endsnippet

snippet ptn "Number prop type" b
PropTypes.number
endsnippet

snippet ptnr "Number prop type required" b
PropTypes.number.isRequired
endsnippet

snippet pto "Object prop type" b
PropTypes.object
endsnippet

snippet ptor "Object prop type required" b
PropTypes.object.isRequired
endsnippet

snippet pts "String prop type" b
PropTypes.string
endsnippet

snippet ptsr "String prop type required" b
PropTypes.string.isRequired
endsnippet

snippet ptnd "Anything that can be rendered prop type" b
PropTypes.node
endsnippet

snippet ptndr "Anything that can be rendered prop type required" b
PropTypes.node.isRequired
endsnippet

snippet ptel "React element prop type" b
PropTypes.element
endsnippet

snippet ptelr "React element prop type required" b
PropTypes.element.isRequired
endsnippet

snippet pti "Is an instance of a class prop type" b
PropTypes.instanceOf($0)
endsnippet

snippet ptir "Is an instance of a class prop type required" b
PropTypes.instanceOf($0).isRequired
endsnippet

snippet pte "Prop type limited to specific values by treating it as an enum" b
PropTypes.oneOf([$0])
endsnippet


#######################################################################
#                                                                     #
#                                Redux                                #
#                                                                     #
#######################################################################

snippet rxaction "Redux Action" b
export const $1 = (payload) => ({
  type: $2,
  payload
})
endsnippet

snippet rxconst "Redux Const" b
export const $1 = '$1'
endsnippet

snippet rxreducer "Redux Reducer" b
const initialState = {}

export default (state = initialState, { type, payload }) => {
  switch (type) {

  case $1:
    return { ...state, ...payload }

  default:
    return state
  }
}
endsnippet

snippet rxselect "Redux Selector" b
import { createSelector } from 'reselect'

export const $1 = state => state.$2
endsnippet

snippet rxslice "Redux Slice" b
import { createSlice } from '@reduxjs/toolkit'

const initialState = {

}

const ${1:`!p snip.rv = snip.basename`} = createSlice({
  name: $2,
  initialState,
  reducers: {}
});

export const {} = $1.actions

export default $1.reducer
endsnippet


#######################################################################
#                                                                     #
#                                Other                                #
#                                                                     #
#######################################################################

snippet exptp "export Type"
export type $1 = {$2}
endsnippet

snippet expint "export Interface"
export interface $1 {$2}
endsnippet

snippet useEffectSnippet "useEffect" b
useEffect(() => {
  $1

  return () => {
    $2
  }
}, [$3])
endsnippet

snippet useImperativeHandleSnippet "useImperativeHandle" b
useImperativeHandle(
  $1,
  () => {
    $2
  },
  [$3],
)
endsnippet

snippet useLayoutEffectSnippet "useLayoutEffect" b
useLayoutEffect(() => {
  $1

  return () => {
    $2
  };
}, [$3])
endsnippet

snippet useMemoSnippet "useMemo" b
useMemo(() => $1, [$2])
endsnippet

snippet useReducerSnippet "useReducer" b
const [state, dispatch] = useReducer($1, $2, $3)
endsnippet

snippet useRefSnippet "useRef" b
const $1 = useRef($2)
endsnippet

snippet useStateSnippet "useState" b
const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)
endsnippet

snippet reduxmap "Mapping to Props" b
const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}
endsnippet

snippet gdsfp "get Derived State From Props"
static getDerivedStateFromProps(props, state) {$1}
endsnippet

snippet gsbu "get Snapshot Before Update"
getSnapshotBeforeUpdate = (prevProps, prevState) => {$1}
endsnippet

snippet rcontext "create Context"
const $1 = React.createContext()
endsnippet

snippet cref "create Ref"
this.$1Ref = React.createRef()
endsnippet

snippet bnd "bind This"
this.$1 = this.$1.bind(this)
endsnippet
